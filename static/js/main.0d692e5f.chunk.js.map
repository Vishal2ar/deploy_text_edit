{"version":3,"sources":["Parts/Navbar.js","Parts/Form.js","Parts/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","navState","state","className","href","title","type","id","onClick","toggelMode","htmlFor","Form","porps","color","useState","text","setText","backgroundColor","fontColor","mode","setMode","style","forhtml","rows","value","onChange","e","target","newText","toUpperCase","toLowerCase","shootAlert","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","console","log","length","split","Alert","alert","role","word","newWord","slice","fistCap","message","App","dark","chDark","setAlert","setTimeout","defaultProps","about","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d692e5f.chunk.js","sourcesContent":["\n\nimport React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n\n \n\nexport default function Navbar(props) {\n\n  let navState = 'navbar navbar-expand-sm navbar-light bg-light';\n\n  if (props.state === 'dark') {\n\n    navState = 'navbar navbar-expand-sm navbar-dark bg-dark';\n\n  }\n\n  if (props.state === 'light'){\n\n    navState = 'navbar navbar-expand-sm navbar-light bg-light';\n\n  }\n\n  const test = () => {console.log(\"test\");}\n\n \n\n  return (\n\n    <div>\n\n      <nav className={navState}>\n\n        <div className=\"container-fluid\">\n          {/* <Router> */}\n          <a className=\"navbar-brand\" href=\"#\">\n\n            {props.title}\n\n          </a>\n          {/* </Router> */}\n          <button\n\n            className=\"navbar-toggler\"\n\n            type=\"button\"\n\n            data-bs-toggle=\"collapse\"\n\n            data-bs-target=\"#navbarSupportedContent\"\n\n            aria-controls=\"navbarSupportedContent\"\n\n            aria-expanded=\"false\"\n\n            aria-label=\"Toggle navigation\"\n\n          >\n\n            <span className=\"navbar-toggler-icon\" />\n\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n              <li className=\"nav-item\">\n              {/* <Router> */}\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n\n                  {/* {props.about} */}\n\n                </a>\n              {/* </Router> */}\n              </li>\n\n \n\n             \n\n            </ul>\n\n            <div className=\"form-check form-switch\">\n\n                <input\n\n                  className=\"form-check-input\"\n\n                  type=\"checkbox\"\n\n                  id=\"flexSwitchCheckDefault\"\n\n                  onClick={props.toggelMode}\n\n                />\n\n                <label\n\n                  className=\"form-check-label\"\n\n                  htmlFor=\"flexSwitchCheckDefault\"\n\n                >\n\n                  Default switch\n\n                </label>\n\n              </div>\n\n          </div>\n\n        </div>\n\n      </nav>\n\n    </div>\n\n  );\n\n}\n\n \n\n// How to use PropTypes\n\nNavbar.propTypes = {\n\n  title: PropTypes.string,\n\n  about: PropTypes.string\n\n};\n\nNavbar.defaultProps = {\n\n  about: 'About'\n\n};\n\n//export default withRouter(Navbar);\n\n","import React,{useState} from 'react';\n\n \n\nexport default function Form(porps) {\n\n  let color = \"black\";\n\n  if(porps.state===\"dark\")\n\n  {\n\n color = \"black\";\n\n // console.log(color);\n\n }\n\nelse if (porps.state===\"light\")\n\n{color = \"orange\";}\n\nconst [text,setText]= useState(\"Enter the text\");\n\nconst [mode , setMode] =useState({backgroundColor : color, fontColor : 'green' })\n\nconst Clear = () => {\n\n  setText(\"\");\n\n}\n\nconst Lower = () => {\n\n  let newText = text.toLowerCase();\n  setText(newText);\n  porps.shootAlert(\"success\",\"To Lower Case\");\n}\n\nconst Upper = () => {\n\n  let newText = text.toUpperCase();\n  setText(newText);\n\n}\n\nconst ModeCh = () => {\n\n  if(mode.backgroundColor === \"black\" || porps.state===\"light\")\n\n  {setMode({backgroundColor : \"orange\", fontColor : \"green\"});}\n\nelse {setMode({backgroundColor : \"black\", fontColor : \"green\"})}\n\n \n\n}\n\n \n\nconst onCopy =() =>{\n\nlet copyText = document.getElementById(\"myBox\");\n\n \n\n  /* Select the text field */\n\n  copyText.select();\n\n  copyText.setSelectionRange(0, 99999); /* For mobile devices */\n\n \n\n  /* Copy the text inside the text field */\n\n  navigator.clipboard.writeText( copyText.value);\n\n // navigator.clipboard.writeText(copyText.value);\n\n console.log(\"Copied \" + copyText.value );\n porps.shootAlert(\"success\",\"Text Copied\");\n}\n\n  \n\n \n\n \n\n \n\n  return (\n\n    <div>\n\n      <div style={mode} className=\"container mb-3\">\n\n        <label forhtml=\"exampleFormControlTextarea1\" className=\"form-label\">\n\n          <h1> To be changed</h1>\n\n        </label>\n\n        <textarea\n\n          className=\"form-control\"\n\n          id=\"myBox\"\n\n          rows=\"5\"\n\n          value = {text}\n\n          onChange={(e)=> setText(e.target.value)}\n\n        />\n\n        <button \n\n        type=\"button\" \n\n        className=\"btn btn-outline-primary  btn-sm\n\n         mx-2 my-2\" \n\n         onClick={Upper}>Upper</button>\n\n         <button \n\n        type=\"button\" \n\n        className=\"btn btn-outline-success btn-sm\n\n         mx-2 my-2\" \n\n         onClick={Lower}>Lower</button>\n\n          <button \n\n        type=\"button\" \n\n        className=\"btn btn-outline-primary btn-sm\n\n         mx-2 my-2\" \n\n         onClick={Clear}>Clear</button>\n\n         <button \n\n        type=\"button\" \n\n        className=\"btn btn-outline-success btn-sm\n\n         mx-2 my-2\" \n\n         onClick={ModeCh}>Mode</button>\n\n         <button \n\n        type=\"button\" \n\n        className=\"btn btn-outline-primary btn-sm\n\n         mx-2 my-2\" \n\n         onClick={onCopy}>Copy</button>\n\n         \n\n      </div>\n\n      <div>\n\n        \n\n        <p>\n\n          Preview : {text} <br />\n\n          Char :  {text.length} <br />\n\n          Words : {text.split(' ').length}\n\n        </p>\n\n      </div>\n\n      \n\n    </div>\n\n  );\n\n}\n\n ","import React from 'react';\n\n \n\nexport default function Alert(porps) {\n\n  const fistCap = (word) => {\n\n   let newWord = \"\";\n\n   newWord = word[0].toUpperCase();\n\n   newWord= newWord + word.slice(1);\n\n   return newWord;\n\n  }\n\n  return (\n\n    porps.alert&& <div>\n\n      <div className={`alert alert-${porps.alert.type} alert-dismissible fade show`} role=\"alert\">\n\n        <strong>{fistCap(porps.alert.type)} </strong> {porps.alert.message} \n\n       \n\n      </div>\n\n    </div>\n\n  );\n\n}","\n\nimport React, { useState } from 'react';\n\nimport './App.css';\n\nimport Navbar from './Parts/Navbar.js';\n\nimport Form from './Parts/Form.js';\n\nimport Alert from './Parts/Alert';\n\n\n\n\n \n\nexport default function App() {\n\n  const [dark, chDark] = useState('dark');\n\n  const [alert,setAlert] = useState(null);\n\n  const shootAlert = (type,message) => {\n\n    \n\n    setAlert({type:type ,message:message});\n\n \n\n    setTimeout(() => {\n\n      setAlert(null);\n\n}, 1500);\n\n  }\n\n  const toggelMode = () => {\n\n   // console.log(dark);\n\n \n\n    if (dark === 'dark') {\n\n      chDark('light');\n\n      shootAlert(\"success\",\"Light Mode On\");\n\n    }\n\n    if (dark === 'light') {\n\n      \n\n      chDark('dark');\n\n      shootAlert(\"success\",\"Dark Mode On\");\n\n    }\n\n  };\n\n  return (\n\n    <div>\n      <Alert  alert = {alert} />\n      <Navbar title=\"Text Editor\" state={dark} toggelMode={toggelMode}  />\n      <Form state=\"dark\" shootAlert={shootAlert} />\n     \n      \n    </div>\n\n  );\n\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}